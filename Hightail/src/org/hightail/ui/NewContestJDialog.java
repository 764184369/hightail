package org.hightail.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.hightail.Config;
import org.hightail.ContestScheduler;
import org.hightail.Problem;
import org.hightail.SupportedSites;
import org.hightail.parsers.contest.ContestParser;
import org.htmlparser.util.ParserException;


public class NewContestJDialog extends javax.swing.JDialog {
    
    protected ArrayList<Problem> problemList = new ArrayList<>();
    protected Thread thread;
    
    /**
     * Creates new form NewContestJDialog
     */
    public NewContestJDialog(java.awt.Frame parent) {
        super(parent, true); // makes it modal
        initComponents();
        
        setTitle("New contest");
        
        makeShortcuts();
        
        setLocationRelativeTo(parent);
        
        // sets cursor in problem name field
        contestUrlField.requestFocus();
        
        contestDirectoryField.setText(Config.get("workingDirectory"));
        
        DocumentListener clearErrorLabel = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                clearErrorMessageLabel();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                clearErrorMessageLabel();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                clearErrorMessageLabel();
            }
            
        };
        contestUrlField.getDocument().addDocumentListener(clearErrorLabel);
        
        // sets hour combobox to current hour+1
        scheduleHourComboBox.setSelectedIndex((Calendar.getInstance().get(Calendar.HOUR_OF_DAY)+1) % 24);
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contestUrlLabel = new javax.swing.JLabel();
        parseContestButton = new javax.swing.JButton();
        contestUrlField = new javax.swing.JTextField();
        contestParseStatusLabel = new javax.swing.JLabel();
        abortParsingButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        errorMessageLabel = new javax.swing.JLabel();
        scheduleCheckBox = new javax.swing.JCheckBox();
        scheduleHourComboBox = new javax.swing.JComboBox();
        scheduleMinuteComboBox = new javax.swing.JComboBox();
        delayLabel = new javax.swing.JLabel();
        contestDirectoryLabel = new javax.swing.JLabel();
        contestDirectoryField = new javax.swing.JTextField();
        selectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        contestUrlLabel.setText("Contest URL:");

        parseContestButton.setText("Parse contest");
        parseContestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseContestButtonActionPerformed(evt);
            }
        });

        abortParsingButton.setText("Abort");
        abortParsingButton.setEnabled(false);
        abortParsingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortParsingButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        scheduleCheckBox.setText("Schedule");
        scheduleCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                scheduleCheckBoxItemStateChanged(evt);
            }
        });

        scheduleHourComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        scheduleHourComboBox.setEnabled(false);

        scheduleMinuteComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        scheduleMinuteComboBox.setEnabled(false);

        delayLabel.setText("(10 seconds delay)");
        delayLabel.setEnabled(false);

        contestDirectoryLabel.setText("Directory:");

        selectButton.setText("Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contestParseStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contestUrlLabel)
                            .addComponent(scheduleCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(contestUrlField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contestDirectoryLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(errorMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                .addGap(15, 15, 15)
                                .addComponent(abortParsingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(parseContestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scheduleHourComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scheduleMinuteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delayLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(contestDirectoryField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contestUrlLabel)
                    .addComponent(contestUrlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contestParseStatusLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contestDirectoryLabel)
                            .addComponent(contestDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scheduleCheckBox)
                            .addComponent(scheduleHourComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scheduleMinuteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delayLabel))))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(abortParsingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(parseContestButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(errorMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void clearErrorMessageLabel() {
        errorMessageLabel.setText(null);
        errorMessageLabel.setToolTipText(null);
    }
    
    private void makeShortcuts() {
        // escape key will close the dialog
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "close");
        getRootPane().getActionMap().put("close", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cancel();
            }
        });
        // hitting enter will perform the same action as clicking parse contest button
        contestUrlField.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "enter");
        contestUrlField.getActionMap().put("enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                parseContest();
            }
        });
        // hitting enter will perform the same action as clicking parse contest button
        scheduleHourComboBox.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "enter");
        scheduleHourComboBox.getActionMap().put("enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                parseContest();
            }
        });
        scheduleMinuteComboBox.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "enter");
        scheduleMinuteComboBox.getActionMap().put("enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                parseContest();
            }
        });
    }
    
    private void parseContest() {
        String URL = contestUrlField.getText();
        if (URL.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter the URL.", "No URL", JOptionPane.ERROR_MESSAGE);
            return;
        }
        problemList.clear();
        if (scheduleCheckBox.isSelected()) {
            Calendar calendar = Calendar.getInstance();
            int hour = Integer.parseInt((String) scheduleHourComboBox.getSelectedItem());
            int minute = Integer.parseInt((String) scheduleMinuteComboBox.getSelectedItem());
            calendar.set(Calendar.HOUR_OF_DAY, hour);
            calendar.set(Calendar.MINUTE, minute);
            calendar.set(Calendar.SECOND, 10);
            Date date = calendar.getTime();
            if (date.before(Calendar.getInstance().getTime())) {
                JOptionPane.showMessageDialog(this, "Chosen time is to early.", "Wrong time", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                SupportedSites.getContestParser(contestUrlField.getText());
            } catch (ParserException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Wrong url", JOptionPane.ERROR_MESSAGE);
                return;
            }
            ContestScheduler.schedule(contestUrlField.getText(), contestDirectoryField.getText(), (MainJFrame) getParent(), date);
            JOptionPane.showMessageDialog(this, "Contest scheduled.", "Success", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
            return;
        }
        parseContestButton.setEnabled(false);
        abortParsingButton.setEnabled(true);
        // TODO: what about the cancel button?
        startParsing(URL);
    }
    
    private void parseContestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseContestButtonActionPerformed
        parseContest();
    }//GEN-LAST:event_parseContestButtonActionPerformed
    
    private void abortParsingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortParsingButtonActionPerformed
        abortParsing();
    }//GEN-LAST:event_abortParsingButtonActionPerformed
    
    private void cancel() {
        problemList.clear();
        this.dispose();
    }
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancel();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void scheduleCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_scheduleCheckBoxItemStateChanged
        boolean selected = (evt.getStateChange() == ItemEvent.SELECTED);
        scheduleHourComboBox.setEnabled(selected);
        scheduleMinuteComboBox.setEnabled(selected);
        delayLabel.setEnabled(selected);
        clearErrorMessageLabel();
    }//GEN-LAST:event_scheduleCheckBoxItemStateChanged

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        JFileChooser fc = new JFileChooser(contestDirectoryField.getText());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            contestDirectoryField.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_selectButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortParsingButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField contestDirectoryField;
    private javax.swing.JLabel contestDirectoryLabel;
    private javax.swing.JLabel contestParseStatusLabel;
    private javax.swing.JTextField contestUrlField;
    private javax.swing.JLabel contestUrlLabel;
    private javax.swing.JLabel delayLabel;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JButton parseContestButton;
    private javax.swing.JCheckBox scheduleCheckBox;
    private javax.swing.JComboBox scheduleHourComboBox;
    private javax.swing.JComboBox scheduleMinuteComboBox;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables
    
    ArrayList<Problem> getProblemList() {
        return problemList;
    }
    
    private void startParsing(final String URL) {
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    errorMessageLabel.setText("Parsing...");
                    errorMessageLabel.setToolTipText(null);
                    ContestParser contestParser = SupportedSites.getContestParser(URL);
                    ArrayList<Problem> tasks = contestParser.parse(URL);
                    if (tasks.isEmpty()) {
                        throw new ParserException();
                    }
                    for (Problem problem : tasks) {
                        problem.setWorkingDirectory(contestDirectoryField.getText());
                        problemList.add(problem);
                    }
                    abortParsingButton.setEnabled(false); // to avoid interruption during dispose
                    dispose(); // TODO: is this okay?
                } catch (ParserException ex) {
                    abortParsingButton.setEnabled(false);
                    parseContestButton.setEnabled(true);
                    errorMessageLabel.setText("Parsing failed.");
                    errorMessageLabel.setToolTipText(ex.getMessage());
                    problemList.clear();
                }
            }
        });
        thread.start();
    }
    
    private void abortParsing() {
        thread.interrupt();
        problemList.clear();
        abortParsingButton.setEnabled(false);
        parseContestButton.setEnabled(true);
    }
}
